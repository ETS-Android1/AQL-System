/*
 *
 * Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 */

options
{
  ERROR_REPORTING = true;
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
  STATIC = false;
}

PARSER_BEGIN(QuestionParser)
package de.foellix.aql.datastructure.handler;
import de.foellix.aql.datastructure.handler.QuestionHandler;

public class QuestionParser
{
  private QuestionHandler questionHandler = new QuestionHandler();

  public QuestionHandler getQuestionHandler()
  {
    return questionHandler;
  }
}

PARSER_END(QuestionParser)

SKIP :
{
  " "
| "\n"
| "\r"
| "\t"
}

TOKEN :
{
  < IN : "IN" >
| 
  < FROM : "FROM" >
| 
  < TO : "TO" >
| 
  < FEATURING :
    "FEATURING"
  | "FEATURES" >
| 
  < USES :
    "USING"
  | "USES" >
| 
  < WITH : "WITH" >
| 
  < FILTER_OPERATOR : "FILTER" >
| 
  < OTHER_OPERATORS :
    "UNIFY"
  | "CONNECT"
  | "CONNECT~"
  | "MINUS"
  | "INTERSECT"
  | "SIGN" >
| 
  < CUSTOM_OPERATORS : ([ "A"-"Z" ] )+ ("~")? >
| 
  < VARIABLE :
    [ "a"-"z" ]
    (
      [ "a"-"z" ]
    | [ "0"-"9" ]
    )* >
| < SOIS1 :
    "Flows"
  | "Slice" >
| < SOIS2 :
    "Permissions"
  | "IntentSources"
  | "IntentSinks"
  | "IntentFilters"
  | "Intents"
  | "Sources"
  | "Sinks"
  | "Arguments" >
| < ENDING :
    "?"
  | "!"
  | "." 
  >
| 
  < STRING : "'" (~[ "'" ])* "'" >
| < INT : ("-")? ([ "0"-"9" ])+ >
}

void queries() :
{
  Token variable;
}
{
  {
    questionHandler.startQueries();
  }
  (
    {
      questionHandler.startQuery();
    }
    (
      query()
    |
      (
        variable = < VARIABLE > "="
        {
          questionHandler.setVariable(variable.toString());
        }
        query()
      )
    )
    {
      questionHandler.endQuery();
    }
  )+
  {
    questionHandler.endQueries();
  }
  < EOF >
}

void query() :
{}
{
  {
    questionHandler.deactivateBrackets();
  }
  questionOrVariable()
|
  (
    {
      questionHandler.activateBrackets();
    }
    "{" questionOrVariable() "}"
  )
}

void questionOrVariable() :
{
  Token variable;
}
{
  question()
|
  (
    "$" variable = < VARIABLE >
    {
      questionHandler.getVariable(variable.toString());
    }
  )
}

void question() :
{
  Token endingSymbol;
}
{
  {
    questionHandler.startQuestion();
  }
  (
    (
      defaultQuestion()
      (
        {
          questionHandler.startFeatures();
        }
        < FEATURING > 
        features()
        {
          questionHandler.endFeatures();
        }
      )?
      (
        {
          questionHandler.startUses();
        }
        < USES > 
        uses()
        {
          questionHandler.endUses();
        }
      )?
      (
        {
          questionHandler.startWiths();
        }
        < WITH > 
        withs()
        {
          questionHandler.endWiths();
        }
      )?
    )
  |
    (
      loadingQuestion()
    )
  |
    (
      operatorQuestion()
    )
  )
  endingSymbol = < ENDING >
  {
    questionHandler.endQuestion(endingSymbol.toString());
  }
}

void features() :
{}
{
  feature()
  (
    "," features()
  )?
}

void feature() :
{
  Token feature;
}
{
  (
    LOOKAHEAD(2)
    (
      feature = < STRING >
      {
        questionHandler.addFeature(feature.toString());
      }
    )
  |
    (
      {
        questionHandler.startFeaturesQuery();
      }
      query()
      {
        questionHandler.endFeaturesQuery();
      }
    )
  )
}

void uses() :
{}
{
  use()
  (
    "," uses()
  )?
}

void use() :
{
  Token use;
}
{
  (
    LOOKAHEAD(2)
    (
      use = < STRING >
      {
        questionHandler.addUse(use.toString());
      }
    )
  |
    (
      {
        questionHandler.startUsesQuery();
      }
      query()
      {
        questionHandler.endUsesQuery();
      }
    )
  )
}

void withs() :
{}
{
  with()
  (
    "," withs()
  )?
}

void with() :
{
  Token key;
  Token value;
}
{
  {
    questionHandler.startWith();
  }
  (
    LOOKAHEAD(2)
    (
      key = < STRING >
      {
        questionHandler.setWithKey(key.toString());
      }
    )
  |
    (
      {
        questionHandler.startWithKeyQuery();
      }
      query()
      {
        questionHandler.endWithKeyQuery();
      }
    )
  )
  "="
  (
    LOOKAHEAD(2)
    (
      value = < STRING >
      {
        questionHandler.setWithValue(value.toString());
      }
    )
  |
    (
      {
        questionHandler.startWithValueQuery();
      }
      query()
      {
        questionHandler.endWithValueQuery();
      }
    )
  )
  {
    questionHandler.endWith();
  }
}

void questions() :
{}
{
  query()
  (
    "," questions()
  )?
}

void loadingQuestion() :
{
  Token file;
}
{
  {
    questionHandler.startLoadingQuestion();
  }
  file = < STRING >
  {
    questionHandler.addAnswer(file.toString());
  }
  {
    questionHandler.endLoadingQuestion();
  }
}

void operatorQuestion() :
{
  Token operator;
  Token key;
  Token value;
  Token soi;
}
{
  (
    (
      operator = < OTHER_OPERATORS >
      {
        questionHandler.startOperatorQuestion(operator.toString());
      }
      "["
      {
        questionHandler.startInnerOperatorQuestions();
      }
      questions()
      {
        questionHandler.endInnerOperatorQuestions();
      }
      "]"
      {
        questionHandler.endOperatorQuestion();
      }
    )
  |
    (
      operator = < FILTER_OPERATOR >
      {
        questionHandler.startFilterQuestion();
      }
      "["
      {
        questionHandler.startInnerFilterQuestion();
      }
      query()
      {
        questionHandler.endInnerFilterQuestion();
      }
      (
        LOOKAHEAD(3)
        {
          questionHandler.startFilterKeyValuePair();
        }
        "|"
        (
          LOOKAHEAD(2)
          {
            questionHandler.startFilterKeyQuery();
          }
          query()
          {
            questionHandler.endFilterKeyQuery();
          }
        | key = < STRING >
          {
            questionHandler.setFilterKey(key.toString());
          }
        )
        "="
        (
          LOOKAHEAD(2)
          {
            questionHandler.startFilterValueQuery();
          }
          query()
          {
            questionHandler.endFilterValueQuery();
          }
        | value = < STRING >
          {
            questionHandler.setFilterValue(value.toString());
          }
        )
        {
          questionHandler.endFilterKeyValuePair();
        }
      )?
      (
        LOOKAHEAD(3)
        {
          questionHandler.startFilterReference();
        }
        "|" reference()
        {
          questionHandler.endFilterReference();
        }
      )?
      (
        LOOKAHEAD(3)
        "|"
        (
          soi = < SOIS1 >
        | soi = < SOIS2 >
        )
        {
          questionHandler.setFilterSubjectOfInterest(soi.toString());
        }
      )?
      "]"
      {
        questionHandler.endFilterQuestion();
      }
    )
  |
    (
      operator = < CUSTOM_OPERATORS >
      {
        questionHandler.startOperatorQuestion(operator.toString());
      }
      "["
      {
        questionHandler.startInnerOperatorQuestions();
      }
      questions()
      {
        questionHandler.endInnerOperatorQuestions();
      }
      "]"
      {
        questionHandler.endOperatorQuestion();
      }
    )
  )
}

void defaultQuestion() :
{
  Token soi;
}
{
  {
    questionHandler.startDefaultQuestion();
  }
  (
    (
      soi = < SOIS1 >
      (
        fromTo()
      | in()
      )
      {
        questionHandler.setSubjectOfInterest(soi.toString());
      }
    )
  |
    (
      soi = < SOIS2 > 
      in()
      {
        questionHandler.setSubjectOfInterest(soi.toString());
      }
    )
  )
  {
    questionHandler.endDefaultQuestion();
  }
}

void fromTo() :
{
}
{
  (
    LOOKAHEAD(42)
    (
      from() to()
    )
  |
    (
      from()
    )
  |
    (
      to()
    )
  )
}

void from() :
{
}
{
  {
    questionHandler.startFrom();
  }
  < FROM > reference()
  {
    questionHandler.endFrom();
  }
}

void to() :
{
}
{
  {
    questionHandler.startTo();
  }
  < TO > reference()
  {
    questionHandler.endTo();
  }
}

void in() :
{
}
{
  {
    questionHandler.startIn();
  }
  < IN > reference()
  {
    questionHandler.endIn();
  }
}

void reference() :
{
  Token statement;
  Token lineNumber;
  Token method;
  Token classname;
  Token app;
}
{
  {
    questionHandler.startReference();
  }
  (
    "Statement" "("
    (
      LOOKAHEAD(4)
      (
        statement = < STRING >
        (
          "," lineNumber = < INT >
          {
            questionHandler.setLineNumber(lineNumber.toString());
          }
        )?
        {
          questionHandler.setStatement(statement.toString());
        }
      )
    |
      (
        {
          questionHandler.startStatementQuery();
        }
        query()
        {
          questionHandler.endStatementQuery();
        }
      )
    )
    ")" "->"
  )?
  (
    "Method" "("
    (
      LOOKAHEAD(2)
      (
        method = < STRING >
        {
          questionHandler.setMethod(method.toString());
        }
      )
    |
      (
        {
          questionHandler.startMethodQuery();
        }
        query()
        {
          questionHandler.endMethodQuery();
        }
      )
    )
    ")" "->"
  )?
  (
    "Class" "("
    (
      LOOKAHEAD(2)
      (
        classname = < STRING >
        {
          questionHandler.setClass(classname.toString());
        }
      )
    |
      (
        {
          questionHandler.startClassQuery();
        }
        query()
        {
          questionHandler.endClassQuery();
        }
      )
    )
    ")" "->"
  )?
  "App" "("
  (
    LOOKAHEAD(2)
    (
      app = < STRING >
      {
        questionHandler.setApp(app.toString());
      }
      appEnd()
    )
  |
    (
      {
        questionHandler.startAppQuery();
      }
      query()
      {
        questionHandler.endAppQuery();
      }
      appEnd()
    )
  )
  {
    questionHandler.endReference();
  }
}

void appEnd() :
{
}
{
  (
    preprocessors()
  )?
  ")"
}

void preprocessors() :
{
}
{
  preprocessor()
  (
    preprocessors()
  )?
}

void preprocessor() :
{
  Token keyword;
}
{
  "|"
  (
    LOOKAHEAD(2)
    (
      keyword = < STRING >
      {
        questionHandler.setKeyword(keyword.toString());
      }
    )
  |
    (
      {
        questionHandler.startKeywordQuery();
      }
      query()
      {
        questionHandler.endKeywordQuery();
      }
    )
  )
}
